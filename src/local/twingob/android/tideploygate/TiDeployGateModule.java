/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package local.twingob.android.tideploygate;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import com.deploygate.sdk.DeployGate;

@Kroll.module(name="TiDeployGate", id="local.twingob.android.tideploygate")
public class TiDeployGateModule extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "TiDeployGateModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public enum LogMode {
		ERROR, WARN, DEBUG, INFO, VERBOSE,
		NOVALUE;
		
		public static LogMode toLogMode(String str) {
			try {
				return valueOf(str);
			} catch (Exception ex) {
				return NOVALUE;
			}
		}
	}

	public TiDeployGateModule() {
		super();
	}

	// Exec Application#onCreate()
	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
		// put module init code that needs to run when the application is created
		Log.d(LCAT, "DeployGate#install()");
		DeployGate.install(app,null,true);
	}

	// Methods
	@Kroll.method
	public void log(String mode, String message) {
		switch (LogMode.toLogMode(mode)) {
		case ERROR:
			DeployGate.logError(message);
			break;
		case WARN:
			DeployGate.logWarn(message);
			break;
		case DEBUG:
			DeployGate.logDebug(message);
			break;
		case INFO:
			DeployGate.logInfo(message);
			break;
		case VERBOSE:
			DeployGate.logVerbose(message);
			break;
		default:
			Log.d(LCAT, "LogMode Error:" + mode);
			return;
		}
	}
	
	@Kroll.method
	public boolean isInitialized() {
		return DeployGate.isInitialized();
	}
	
	@Kroll.method
	public boolean isManaged() {
		return DeployGate.isManaged();
	}

	@Kroll.method
	public boolean isDeployGateAvailable() {
		return DeployGate.isDeployGateAvaliable();
	}
	
	@Kroll.method
	public boolean isAuthorized() {
		return DeployGate.isAuthorized();
	}
	
	@Kroll.method
	public String getLoginUsername() {
		return DeployGate.getLoginUsername();
	}
	
	@Kroll.method
	public void refresh() {
		DeployGate.refresh();
	}
}
